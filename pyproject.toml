[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "eda-to-model-scaffold"
version = "0.1.0"
description = "EDA-driven model selection scaffold with interpretability-first pipelines for tabular ML"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = [
    "machine-learning",
    "tabular-data",
    "model-selection",
    "interpretability",
    "sklearn",
    "xgboost",
    "lightgbm",
    "optuna",
    "shap",
    "calibration",
    "conformal-prediction"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.10"

# Minimal dependencies
dependencies = [
    "numpy>=1.23",
    "pandas>=2.0",
    "scikit-learn>=1.3",
    "matplotlib>=3.7",
]

# Optional dependencies for different use cases
[project.optional-dependencies]
# Full ML stack with explainability and tuning
full = [
    "xgboost>=2.0",
    "lightgbm>=4.0",
    "shap>=0.44",
    "optuna>=3.4",
    "statsmodels>=0.14",
    "scipy>=1.10",
]

# Development dependencies
dev = [
    "jupyter>=1.0.0",
    "notebook>=6.0.0",
    "ipykernel>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
]

# Documentation dependencies
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

# All dependencies combined
all = [
    "eda-to-model-scaffold[full,dev,test,docs]"
]

[project.urls]
Homepage = "https://github.com/yourusername/eda-to-model-scaffold"
Repository = "https://github.com/yourusername/eda-to-model-scaffold"
Documentation = "https://github.com/yourusername/eda-to-model-scaffold#readme"
"Bug Tracker" = "https://github.com/yourusername/eda-to-model-scaffold/issues"

[project.scripts]
eda-train = "eda_to_model_scaffold.scripts.train:main"
eda-optuna = "eda_to_model_scaffold.scripts.optuna_tune:main"
eda-compare = "eda_to_model_scaffold.scripts.compare:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.setuptools.package-dir]
"" = "src"

# Black code formatting
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = [
    "numpy",
    "pandas",
    "sklearn",
    "matplotlib",
    "xgboost",
    "lightgbm",
    "shap",
    "optuna",
    "scipy",
    "statsmodels"
]

# MyPy type checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "xgboost.*",
    "lightgbm.*",
    "shap.*",
    "optuna.*",
    "statsmodels.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Flake8 linting (via setup.cfg or .flake8 file is more common, but can be here)
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs"
]

# Ruff (alternative to flake8 + black + isort)
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["src"]
