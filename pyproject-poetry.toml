# Poetry-compatible pyproject.toml
# To use with Poetry: rename this to pyproject.toml and run: poetry install

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "eda-to-model-scaffold"
version = "0.1.0"
description = "EDA-driven model selection scaffold with interpretability-first pipelines for tabular ML"
authors = ["Ravi Sharma <ravioactive@example.com>"]
maintainers = ["Ravi Sharma <ravioactive@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/ravioactive/eda-to-model-scaffold"
repository = "https://github.com/ravioactive/eda-to-model-scaffold"
documentation = "https://github.com/ravioactive/eda-to-model-scaffold#readme"
keywords = [
    "machine-learning",
    "tabular-data", 
    "model-selection",
    "interpretability",
    "sklearn",
    "xgboost",
    "lightgbm",
    "optuna",
    "shap",
    "calibration",
    "conformal-prediction"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
packages = [{include = "eda_to_model_scaffold", from = "src"}]

# Core dependencies (always installed)
[tool.poetry.dependencies]
python = ">=3.10,<4.0"
numpy = ">=1.23"
pandas = ">=2.0"
scikit-learn = ">=1.3"
matplotlib = ">=3.7"

# Optional dependencies
xgboost = {version = ">=2.0", optional = true}
lightgbm = {version = ">=4.0", optional = true}
shap = {version = ">=0.44", optional = true}
optuna = {version = ">=3.4", optional = true}
statsmodels = {version = ">=0.14", optional = true}
scipy = {version = ">=1.10", optional = true}

# Development dependencies
jupyter = {version = ">=1.0.0", optional = true}
notebook = {version = ">=6.0.0", optional = true}
ipykernel = {version = ">=6.0.0", optional = true}
black = {version = ">=23.0.0", optional = true}
isort = {version = ">=5.12.0", optional = true}
flake8 = {version = ">=6.0.0", optional = true}
mypy = {version = ">=1.0.0", optional = true}
pytest = {version = ">=7.0.0", optional = true}
pytest-cov = {version = ">=4.0.0", optional = true}
pytest-xdist = {version = ">=3.0.0", optional = true}

# Documentation dependencies
sphinx = {version = ">=5.0.0", optional = true}
sphinx-rtd-theme = {version = ">=1.0.0", optional = true}
myst-parser = {version = ">=0.18.0", optional = true}

# Optional dependency groups (Poetry extras)
[tool.poetry.extras]
full = ["xgboost", "lightgbm", "shap", "optuna", "statsmodels", "scipy"]
dev = ["jupyter", "notebook", "ipykernel", "black", "isort", "flake8", "mypy", "pytest", "pytest-cov"]
test = ["pytest", "pytest-cov", "pytest-xdist"]
docs = ["sphinx", "sphinx-rtd-theme", "myst-parser"]
all = ["xgboost", "lightgbm", "shap", "optuna", "statsmodels", "scipy", "jupyter", "notebook", "ipykernel", "black", "isort", "flake8", "mypy", "pytest", "pytest-cov", "pytest-xdist", "sphinx", "sphinx-rtd-theme", "myst-parser"]

# CLI scripts
[tool.poetry.scripts]
eda-train = "eda_to_model_scaffold.scripts.train:main"
eda-optuna = "eda_to_model_scaffold.scripts.optuna_tune:main"
eda-compare = "eda_to_model_scaffold.scripts.compare:main"

# Development dependencies (Poetry style)
[tool.poetry.group.dev.dependencies]
jupyter = ">=1.0.0"
notebook = ">=6.0.0"
ipykernel = ">=6.0.0"
black = ">=23.0.0"
isort = ">=5.12.0"
flake8 = ">=6.0.0"
mypy = ">=1.0.0"
pytest = ">=7.0.0"
pytest-cov = ">=4.0.0"
pytest-xdist = ">=3.0.0"

# Build configuration
[tool.poetry.build]
generate-setup-file = false

# Publishing configuration (for artifactory)
[[tool.poetry.source]]
name = "artifactory"
url = "https://your-artifactory.com/artifactory/api/pypi/your-repo/simple"
priority = "supplemental"

# Keep all existing tool configurations
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["eda_to_model_scaffold"]
known_third_party = [
    "numpy",
    "pandas", 
    "sklearn",
    "matplotlib",
    "xgboost",
    "lightgbm",
    "shap",
    "optuna",
    "scipy",
    "statsmodels"
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "xgboost.*",
    "lightgbm.*", 
    "shap.*",
    "optuna.*",
    "statsmodels.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["eda_to_model_scaffold"]
